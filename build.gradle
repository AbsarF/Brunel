
/*
 * Copyright (c) 2015 IBM Corporation and others.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * You may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

ext.tomcatHome = System.properties["TOMCAT_HOME"] ?: System.getenv()["TOMCAT_HOME"]
ext.brunelServer = System.properties["BRUNEL_SERVER"] ?: System.getenv()["BRUNEL_SERVER"]

println 'Required environment variable values are: '
println 'TOMCAT_HOME is ' + tomcatHome
println 'BRUNEL_SERVER is ' + brunelServer

if (tomcatHome == null) tomcatHome ="tomcat"
if (brunelServer == null) brunelServer = "http://locahost:8080/brunel-service"

//All JS/CSS files needed to run Brunel under the assumption the translator has been run
ext.webFiles = files(project(':core').file('src/main/resources/javascript'), project(':data').file('build/translated'))
def distName = 'brunel-all'


configure([project(":data"), project(":core"), project(":etc"), project(":service")]) {
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'idea'

    compileJava.options.encoding = 'UTF-8'
    compileTestJava.options.encoding = 'UTF-8'

    repositories {
        mavenCentral()
        flatDir {
            dirs '../lib', '../lib/rave'
        }
    }

    uploadArchives {
	    repositories {
	       flatDir {
	           dirs '../out/java'
	       }
	    }
	}


	task brunelJar (dependsOn: [build, uploadArchives])  {
		description "Build and Creation of Brunel JAR/WAR artifacts to brunel/out/java"
	}

    dependencies {
        testCompile group: 'junit', name: 'junit', version: '4.+'
    }



    version = '0.8'

    jar {
        manifest.attributes provider: 'org.brunel'
    }

}

repositories {
    mavenCentral()
}

configurations {
    minification
}
dependencies {
    minification 'com.google.javascript:closure-compiler:r2388'
}

//Aggregated Javadocs
task brunelJavadoc(type: Javadoc) {
	description 'Create aggregated javadocs for all Java projects'
    def doccing = [project(':core'), project(':data'),  project(':etc'), project(':service')]
    source doccing.collect {project -> project.sourceSets.main.allJava }
    classpath = files(doccing.collect {project -> project.sourceSets.main.compileClasspath})
    destinationDir = new File(projectDir, 'out/javadocs')
    options.encoding = "UTF-8"
}

task brunelJS(type: Copy, dependsOn: [project(':core').build, project(':data').build]) {
	from webFiles
	exclude '*Test*'
	into 'out/javascript'
}

task brunelSyntaxDoc(type: Copy) {
	from project(':gallery').file('src/main/webapp/docs/Brunel Documentation.pdf')
	exclude '*Test*'
	into 'out'
}


task build(dependsOn: [project(':core').brunelJar, project(':etc').brunelJar, project(':data').brunelJar,
	project(':service').brunelJar,  brunelJS, brunelJavadoc, brunelSyntaxDoc]) {
}

task makeMinified(type: JavaExec, dependsOn: build) {
    print new File(".").absolutePath
    classpath configurations.minification
    main = 'com.google.javascript.jscomp.CommandLineRunner'
    def closureArgs = []
    closureArgs << "--charset" << "utf-8"
    closureArgs << "--compilation_level" << "SIMPLE_OPTIMIZATIONS"
    closureArgs << "--js_output_file" << "out/javascript/brunel.0.7.min.js"
    closureArgs << "out/javascript/BrunelD3.js"
    closureArgs << "out/javascript/BrunelData.js"
    args closureArgs
}

task makeMinifiedControls(type: JavaExec, dependsOn: build) {
    print new File(".").absolutePath
    classpath configurations.minification
    main = 'com.google.javascript.jscomp.CommandLineRunner'
    def closureArgs = []
    closureArgs << "--charset" << "utf-8"
    closureArgs << "--compilation_level" << "SIMPLE_OPTIMIZATIONS"
    closureArgs << "--js_output_file" << "out/javascript/brunel.controls.0.7.min.js"
    closureArgs << "out/javascript/sumoselect/jquery.sumoselect.min.js"
    closureArgs << "out/javascript/BrunelEventHandlers.js"
    closureArgs << "out/javascript/BrunelJQueryControlFactory.js"
    args closureArgs
}

task makeZip(type:Zip, dependsOn: [build, makeMinified] ) {
    description 'Create a .zip of the contents of the build output (/out)'
	from ('out/')
	archiveName distName + ".zip"
}

task makeTar(type:Tar, dependsOn: [build, makeMinified] ) {
    description 'Create a compressed tar of the contents of the build output (/out)'
	from ('out/')
	compression = Compression.GZIP
	archiveName distName + ".tar.gz"
}

task makeArchives(dependsOn: [makeZip, makeTar]) {
    description 'Create both .zip and compressed tar of the contents of the build output (/out)'

}

